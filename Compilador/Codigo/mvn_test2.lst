				;	            @   /0000 ; Início do programa
0000 03fc		;	            JP    MAIN  ; Jump para o código que invocará a subrotina

0002 00ff		;	IN                K   /00FF
0004 ff00		;	CTE               K   /FF00

0006 8000		;	LOAD_PREFIX       LD    /0
0008 9000		;	WRITE_PREFIX      MM    /0

000a 072d		;	ASCII_MINUS       K     /072D
000c 0030		;	ASCII_0           k     /30
000e 0039		;	ASCII_9           k     /39
0010 0d0a		;	ASCII_BR          k     /0D0A
0012 000d		;	ASCII_BELL        k     /000D


0014 1000		;	SHIFT3            k     /1000
0016 0100		;	SHIFT2            k     /100
0018 0010		;	SHIFT1            k     /10
001a 0037		;	HEX_LETTER_TO_ASCII     K     /37

001c 0001		;	ONE               K     /1
001e 000a		;	A                 K     /a
0020 8000		;	8MIL              K     /8000
0022 3132		;	TRTR              K     /3132
0024 ffff		;	FFFF              K     /FFFF


0026 0010		;	_RESERVED_BITS_ON_WORD  K   /10

;
;  Espaco reservado para funcoes internas, tambem servem de entrada e saida das mesmas (ver def de cada funcao)
;
0028 0000		;	_TEMP_1     K   /0
002a 0000		;	_TEMP_2     K   /0
002c 0000		;	_TEMP_3     K   /0
002e 0000		;	_TEMP_4     K   /0
0030 0000		;	_TEMP_5     K   /0
0032 0000		;	_TEMP_6     K   /0
0034 0000		;	_TEMP_7     K   /0
0036 0000		;	_TEMP_8     K   /0
0038 0000		;	_TEMP_9     K   /0
003a 0000		;	_TEMP_10     K   /0
003c 0000		;	_TEMP_11     K   /0
003e 0000		;	_TEMP_12     K   /0


0040 0000		;	_GD_INPUT   $     =50   0
0042 0000		;	_GD_INPUT   $     =50   2
0044 0000		;	_GD_INPUT   $     =50   4
0046 0000		;	_GD_INPUT   $     =50   6
0048 0000		;	_GD_INPUT   $     =50   8
004a 0000		;	_GD_INPUT   $     =50   a
004c 0000		;	_GD_INPUT   $     =50   c
004e 0000		;	_GD_INPUT   $     =50   e
0050 0000		;	_GD_INPUT   $     =50   10
0052 0000		;	_GD_INPUT   $     =50   12
0054 0000		;	_GD_INPUT   $     =50   14
0056 0000		;	_GD_INPUT   $     =50   16
0058 0000		;	_GD_INPUT   $     =50   18
005a 0000		;	_GD_INPUT   $     =50   1a
005c 0000		;	_GD_INPUT   $     =50   1c
005e 0000		;	_GD_INPUT   $     =50   1e
0060 0000		;	_GD_INPUT   $     =50   20
0062 0000		;	_GD_INPUT   $     =50   22
0064 0000		;	_GD_INPUT   $     =50   24
0066 0000		;	_GD_INPUT   $     =50   26
0068 0000		;	_GD_INPUT   $     =50   28
006a 0000		;	_GD_INPUT   $     =50   2a
006c 0000		;	_GD_INPUT   $     =50   2c
006e 0000		;	_GD_INPUT   $     =50   2e
0070 0000		;	_GD_INPUT   $     =50   30
0072 0000		;	_GD_INPUT   $     =50   32
0074 0000		;	_GD_INPUT   $     =50   34
0076 0000		;	_GD_INPUT   $     =50   36
0078 0000		;	_GD_INPUT   $     =50   38
007a 0000		;	_GD_INPUT   $     =50   3a
007c 0000		;	_GD_INPUT   $     =50   3c
007e 0000		;	_GD_INPUT   $     =50   3e
0080 0000		;	_GD_INPUT   $     =50   40
0082 0000		;	_GD_INPUT   $     =50   42
0084 0000		;	_GD_INPUT   $     =50   44
0086 0000		;	_GD_INPUT   $     =50   46
0088 0000		;	_GD_INPUT   $     =50   48
008a 0000		;	_GD_INPUT   $     =50   4a
008c 0000		;	_GD_INPUT   $     =50   4c
008e 0000		;	_GD_INPUT   $     =50   4e
0090 0000		;	_GD_INPUT   $     =50   50
0092 0000		;	_GD_INPUT   $     =50   52
0094 0000		;	_GD_INPUT   $     =50   54
0096 0000		;	_GD_INPUT   $     =50   56
0098 0000		;	_GD_INPUT   $     =50   58
009a 0000		;	_GD_INPUT   $     =50   5a
009c 0000		;	_GD_INPUT   $     =50   5c
009e 0000		;	_GD_INPUT   $     =50   5e
00a0 0000		;	_GD_INPUT   $     =50   60
00a2 0000		;	_GD_INPUT   $     =50   62
				;	_GD_INPUT   $     =50


;----------------------------
; Faz AND de duas entradas
; IN1: AC
; IN2: _TEMP_1
; VARS: _TEMP_2 (temporario da entrada do AC), _TEMP_3 (construcao da saida), _TEMP_4 (contador para leitura de todos os bits)
; OUT:  AC
;----------------------------{
00a4 0000		;	      AND         K   /0
00a6 902a		;	                  MM  _TEMP_2
00a8 3000		;	                  LV  /0
00aa 902c		;	                  MM  _TEMP_3
00ac 902e		;	                  MM  _TEMP_4
00ae 902e		;	                  MM  _TEMP_4

00b0 3002		;	      AND_BEGIN   LV  /2
00b2 602c		;	                  *   _TEMP_3
00b4 902c		;	                  MM  _TEMP_3
00b6 802a		;	                  LD  _TEMP_2
00b8 20bc		;	                  JN  AND_AC_NEG
00ba 00c2		;	                  JP  AND_AC_POS
00bc 8028		;	      AND_AC_NEG  LD  _TEMP_1
00be 20c6		;	                  JN  AND_ONE
00c0 00c4		;	                  JP  AND_ZERO
00c2 00c4		;	      AND_AC_POS  JP  AND_ZERO
00c4 00ce		;	      AND_ZERO    JP  AND_END
00c6 3001		;	      AND_ONE     LV  /1
00c8 402c		;	                  +   _TEMP_3
00ca 902c		;	                  MM  _TEMP_3
00cc 00ce		;	                  JP  AND_END
00ce 3002		;	      AND_END     LV  /2
00d0 602a		;	                  *   _TEMP_2
00d2 902a		;	                  MM  _TEMP_2
00d4 3002		;	                  LV  /2
00d6 6028		;	                  *   _TEMP_1
00d8 9028		;	                  MM  _TEMP_1
00da 3001		;	                  LV  /1
00dc 402e		;	                  +   _TEMP_4
00de 902e		;	                  MM  _TEMP_4
00e0 5026		;	                  -   _RESERVED_BITS_ON_WORD
00e2 20b0		;	                  JN  AND_BEGIN
00e4 802c		;	                  LD  _TEMP_3
00e6 b0a4		;	                  RS  AND
;}

;----------------------------
; Faz OR de duas entradas
; IN1: AC
; IN2: _TEMP_1
; VARS: _TEMP_2 (temporario da entrada do AC), _TEMP_3 (construcao da saida), _TEMP_4 (contador para leitura de todos os bits)
; OUT:  AC
;----------------------------{
00e8 0000		;	      OR         K   /0
00ea 902a		;	                  MM  _TEMP_2
00ec 3000		;	                  LV  /0
00ee 902c		;	                  MM  _TEMP_3
00f0 902e		;	                  MM  _TEMP_4
00f2 902e		;	                  MM  _TEMP_4

00f4 3002		;	      OR_BEGIN    LV  /2
00f6 602c		;	                  *   _TEMP_3
00f8 902c		;	                  MM  _TEMP_3
00fa 802a		;	                  LD  _TEMP_2
00fc 2100		;	                  JN  OR_AC_NEG
00fe 0102		;	                  JP  OR_AC_POS
0100 010a		;	      OR_AC_NEG   JP  OR_ONE
0102 8028		;	      OR_AC_POS   LD  _TEMP_1
0104 210a		;	                  JN  OR_ONE
0106 0108		;	                  JP  OR_ZERO
0108 0112		;	      OR_ZERO     JP  OR_END
010a 3001		;	      OR_ONE      LV  /1
010c 402c		;	                  +   _TEMP_3
010e 902c		;	                  MM  _TEMP_3
0110 0112		;	                  JP  OR_END
0112 3002		;	      OR_END      LV  /2
0114 602a		;	                  *   _TEMP_2
0116 902a		;	                  MM  _TEMP_2
0118 3002		;	                  LV  /2
011a 6028		;	                  *   _TEMP_1
011c 9028		;	                  MM  _TEMP_1
011e 3001		;	                  LV  /1
0120 402e		;	                  +   _TEMP_4
0122 902e		;	                  MM  _TEMP_4
0124 5026		;	                  -   _RESERVED_BITS_ON_WORD
0126 20f4		;	                  JN  OR_BEGIN
0128 802c		;	                  LD  _TEMP_3
012a b0e8		;	                  RS  OR
;}

;----------------------------
; Faz o output de entradas ascii
; IN1: _TEMP_1 (endereco base da entrada)
; IN2: AC (Tamanho desses dados)
; IN3: _TEMP_7 (ler como ascii(nao-negativo) ou nao(negativo))
; VARS: 
;      _TEMP_2 (contagem do tamanho para condicao de parada), 
;      _TEMP_3 (temporario para o tamanho dos dados), 
;      _TEMP_4 (DADO ATUAL -> 0x1234), 
;      _TEMP_5 (primeiro byte ou primeiro numero), 
;      _TEMP_6 (segundo byte ou segundo numero), 
;      _TEMP_8, (terceiro numero)
;      _TEMP_9, (quarto numero)
;      _TEMP_10 (offset do endereco base para fazer o load da prox word)
; OUT: Na tela
; OBS: há dois modos de impressao: as-is e ascii. As-is pega o numero, transforma em caracteres ascii e imprime. ascci interpreta a entrada como ascii
; GOTCHA: em modo ASCII, eh considerado que a word nunca sera negativo, pois caracteres ASCII vao ate 7E
; GOTCHA2: o tamanho de dados tem significados diferentes nos dois modos: em ASCII, significa numero de bytes e em AS-IS, words
;----------------------------{
012c 0000		;	      PRINT                   K     /0
                              
012e 902c		;	                              MM    _TEMP_3

0130 3000		;	                              LV    /0
0132 902a		;	                              MM    _TEMP_2
0134 903a		;	                              MM    _TEMP_10


0136 8028		;	      PRINT_BEGIN             LD    _TEMP_1
0138 403a		;	                              +     _TEMP_10
013a 4006		;	                              +     LOAD_PREFIX
013c 913e		;	                              MM    PRINT_LOAD_DATA
013e 0000		;	      PRINT_LOAD_DATA         K     /0
0140 902e		;	                              MM    _TEMP_4

0142 8034		;	                              LD    _TEMP_7

0144 1176		;	                              JZ    PRINT_AS_IS
0146 0148		;	                              JP    PRINT_AS_ASCII

      ;/---------------------------------------------------\
0148 3001		;	      PRINT_AS_ASCII          LV    /1
014a 402a		;	                              +     _TEMP_2
014c 902a		;	                              MM    _TEMP_2
014e 502c		;	                              -     _TEMP_3
0150 115a		;	                              JZ    PRINT_AS_ASCII_ODD

0152 3001		;	                              LV    /1
0154 402a		;	                              +     _TEMP_2
0156 902a		;	                              MM    _TEMP_2
0158 0164		;	                              JP    PRINT_AS_ASCII_EVEN

015a 802e		;	      PRINT_AS_ASCII_ODD      LD    _TEMP_4                 ;SEPARA OS BYTES
015c 7016		;	                              /     SHIFT2
015e 6016		;	                              *     SHIFT2
0160 e100		;	                              PD    /0100
0162 0232		;	                              JP    PRINT_END

0164 802e		;	      PRINT_AS_ASCII_EVEN     LD    _TEMP_4
0166 e100		;	                              PD    /0100

0168 3002		;	                              LV    /2
016a 403a		;	                              +     _TEMP_10
016c 903a		;	                              MM    _TEMP_10

016e 802a		;	                              LD    _TEMP_2
0170 502c		;	                              -     _TEMP_3
0172 1232		;	                              JZ    PRINT_END
0174 0136		;	                              JP    PRINT_BEGIN
      ;\---------------------------------------------------/
      ;/---------------------------------------------------\
0176 802e		;	      PRINT_AS_IS             LD    _TEMP_4
0178 217c		;	                              JN    PRINT_NEG
017a 0186		;	                              JP    PRINT_POS
017c 800a		;	      PRINT_NEG               LD    ASCII_MINUS
017e e100		;	                              PD    /0100
0180 802e		;	                              LD    _TEMP_4
0182 6024		;	                              *     FFFF
0184 902e		;	                              MM    _TEMP_4

0186 7014		;	      PRINT_POS               /     SHIFT3            ;Separa todos os numeros
0188 6014		;	                              *     SHIFT3
018a 9030		;	                              MM    _TEMP_5

018c 802e		;	                              LD    _TEMP_4
018e 5030		;	                              -     _TEMP_5
0190 7016		;	                              /     SHIFT2
0192 6016		;	                              *     SHIFT2
0194 9032		;	                              MM    _TEMP_6

0196 802e		;	                              LD    _TEMP_4
0198 5030		;	                              -     _TEMP_5
019a 5032		;	                              -     _TEMP_6
019c 7018		;	                              /     SHIFT1
019e 6018		;	                              *     SHIFT1
01a0 9036		;	                              MM    _TEMP_8

01a2 802e		;	                              LD    _TEMP_4
01a4 5030		;	                              -     _TEMP_5
01a6 5032		;	                              -     _TEMP_6
01a8 5036		;	                              -     _TEMP_8
01aa 9038		;	                              MM    _TEMP_9           ;separado (0x1234 viraria: 0x1000, 0x0200, 0x0030 e 0x0004)
                              
01ac 8030		;	                              LD    _TEMP_5
01ae 7014		;	                              /     SHIFT3
01b0 9030		;	                              MM    _TEMP_5
01b2 501e		;	                              -     A
01b4 21b8		;	                              JN    PRINT_SUM_NUMBER_1
01b6 01c0		;	                              JP    PRINT_SUM_LETTER_1
01b8 8030		;	      PRINT_SUM_NUMBER_1      LD    _TEMP_5 
01ba 400c		;	                              +     ASCII_0
01bc 9030		;	                              MM    _TEMP_5
01be 01c6		;	                              JP    PRINT_AS_IS_1
01c0 8030		;	      PRINT_SUM_LETTER_1      LD    _TEMP_5 
01c2 401a		;	                              +     HEX_LETTER_TO_ASCII
01c4 9030		;	                              MM    _TEMP_5
01c6 8032		;	      PRINT_AS_IS_1           LD    _TEMP_6
01c8 7016		;	                              /     SHIFT2
01ca 9032		;	                              MM    _TEMP_6
01cc 501e		;	                              -     A
01ce 21d2		;	                              JN    PRINT_SUM_NUMBER_2
01d0 01da		;	                              JP    PRINT_SUM_LETTER_2
01d2 8032		;	      PRINT_SUM_NUMBER_2      LD    _TEMP_6
01d4 400c		;	                              +     ASCII_0
01d6 9032		;	                              MM    _TEMP_6
01d8 01e0		;	                              JP    PRINT_AS_IS_2
01da 8032		;	      PRINT_SUM_LETTER_2      LD    _TEMP_6
01dc 401a		;	                              +     HEX_LETTER_TO_ASCII
01de 9032		;	                              MM    _TEMP_6
01e0 8030		;	      PRINT_AS_IS_2           LD    _TEMP_5
01e2 6016		;	                              *     SHIFT2
01e4 4032		;	                              +     _TEMP_6
01e6 e100		;	                              PD    /0100

01e8 8036		;	                              LD    _TEMP_8
01ea 7018		;	                              /     SHIFT1
01ec 9036		;	                              MM    _TEMP_8
01ee 501e		;	                              -     A
01f0 21f4		;	                              JN    PRINT_SUM_NUMBER_3
01f2 01fc		;	                              JP    PRINT_SUM_LETTER_3
01f4 8036		;	      PRINT_SUM_NUMBER_3      LD    _TEMP_8 
01f6 400c		;	                              +     ASCII_0
01f8 9036		;	                              MM    _TEMP_8
01fa 0202		;	                              JP    PRINT_AS_IS_3
01fc 8036		;	      PRINT_SUM_LETTER_3      LD    _TEMP_8 
01fe 401a		;	                              +     HEX_LETTER_TO_ASCII
0200 9036		;	                              MM    _TEMP_8
0202 8038		;	      PRINT_AS_IS_3           LD    _TEMP_9
0204 501e		;	                              -     A
0206 220a		;	                              JN    PRINT_SUM_NUMBER_4
0208 0212		;	                              JP    PRINT_SUM_LETTER_4
020a 8038		;	      PRINT_SUM_NUMBER_4      LD    _TEMP_9
020c 400c		;	                              +     ASCII_0
020e 9038		;	                              MM    _TEMP_9
0210 0218		;	                              JP    PRINT_AS_IS_4
0212 8038		;	      PRINT_SUM_LETTER_4      LD    _TEMP_9
0214 401a		;	                              +     HEX_LETTER_TO_ASCII
0216 9038		;	                              MM    _TEMP_9
0218 8036		;	      PRINT_AS_IS_4           LD    _TEMP_8
021a 6016		;	                              *     SHIFT2
021c 4038		;	                              +     _TEMP_9
021e e100		;	                              PD    /0100

0220 3001		;	                              LV    /1
0222 402a		;	                              +     _TEMP_2
0224 902a		;	                              MM    _TEMP_2
0226 502c		;	                              -     _TEMP_3
0228 1232		;	                              JZ    PRINT_END

022a 3002		;	                              LV    /2
022c 403a		;	                              +     _TEMP_10
022e 903a		;	                              MM    _TEMP_10

0230 0136		;	                              JP    PRINT_BEGIN
      ;\---------------------------------------------------/

0232 b12c		;	      PRINT_END               RS    PRINT
;}

;----------------------------
; Faz o carregamento de um valor a partir de um endereco base e um offset
; IN1: LOAD_BASE (endereco base da entrada)
; IN2: AC (offset)
; OUT: Valor no AC
;----------------------------{
0234 0000		;	      LOAD_BASE   K     /0
0236 0000		;	      LOAD        K     /0
0238 4028		;	                  +    _TEMP_1
023a 4006		;	                  +     LOAD_PREFIX
023c 923e		;	                  MM    LOAD_DO
023e 0000		;	      LOAD_DO     K     /0
0240 b236		;	                  RS    LOAD
;}

;----------------------------
; Faz a escrita de um valor em um endereco base e um offset
; IN1: WRITE_BASE (endereco base da entrada)
; IN2: AC (offset)
; IN3: WRITE_DATA
;----------------------------{
0242 0000		;	      WRITE_BASE  K     /0
0244 0000		;	      WRITE_DATA  K     /0
0246 0000		;	      WRITE       K     /0
0248 4242		;	                  +     WRITE_BASE
024a 4008		;	                  +     WRITE_PREFIX
024c 9250		;	                  MM    WRITE_DO
024e 8244		;	                  LD    WRITE_DATA
0250 0000		;	      WRITE_DO    K     /0
0252 b246		;	                  RS    WRITE
;}

;----------------------------
; Faz a separação de bytes de uma word
; IN1: AC (word)
; OUT1: BYTIFY_FIRST - primeiro byte
; OUT2: BYTIFY_SECOND - segundo byte
;----------------------------{
0254 0000		;	      BYTIFY_ORIGINAL   K     /0
0256 0000		;	      BYTIFY_FIRST      K     /0
0258 0000		;	      BYTIFY_SECOND      K     /0


      
025a 0000		;	      BYTIFY      K     /0
025c 9254		;	                  MM    BYTIFY_ORIGINAL
025e 2262		;	                  JN    BYTIFY_NEG
0260 026e		;	                  JP    BYTIFY_POS
0262 6024		;	      BYTIFY_NEG  *     FFFF
0264 7016		;	                  /     SHIFT2
0266 401c		;	                  +     ONE
0268 6016		;	                  *     SHIFT2
026a 9256		;	                  MM    BYTIFY_FIRST
026c 0274		;	                  JP    BYTIFY_SB
026e 7016		;	      BYTIFY_POS  /     SHIFT2
0270 6016		;	                  *     SHIFT2
0272 9256		;	                  MM    BYTIFY_FIRST
0274 8254		;	      BYTIFY_SB   LD    BYTIFY_ORIGINAL
0276 5256		;	                  -     BYTIFY_FIRST
0278 9258		;	                  MM    BYTIFY_SECOND
027a 8256		;	                  LD    BYTIFY_FIRST
027c 7016		;	                  /     SHIFT2
027e 9256		;	                  MM    BYTIFY_FIRST
0280 b25a		;	                  RS    BYTIFY
;}

;----------------------------
; Faz a unificacao de bytes em uma word
; IN1: AC (high byte)
; IN2: WORDFY_LOW_BYTE (low byte) 
; OUT: AC
;----------------------------{
0282 0000		;	      WORDFY_LOW_BYTE      K     /0
      
0284 0000		;	      WORDFY      K     /0
0286 6016		;	                  *     SHIFT2
0288 4282		;	                  +     WORDFY_LOW_BYTE
028a b284		;	                  RS    WORDFY
;}

;----------------------------
; Faz o carregamento de dados do programador
; IN1: _TEMP_1: endereço base do buffer
; IN2: AC: buffer limit em words
; VAR: _TEMP_2 (buffer limit temp), _TEMP_3 (contagem de inputs recebidos), _TEMP_4(dado recebido)
; OUT: dados no buffer
; OBS: Premissa: todas as entradas do teclado são e serão "positivas"
;----------------------------{
028c 0000		;	      READ_BUFFER_LIMIT K           /0
028e 0000		;	      READ_COUNT        K           /0
0290 0000		;	      READ_DATA         K           /0
0292 0000		;	      READ_BASE         K           /0

0294 0000		;	      READ              K           /0
0296 928c		;	                        MM          READ_BUFFER_LIMIT
0298 3000		;	                        LV          /0
029a 928e		;	                        MM          READ_COUNT
029c 9290		;	                        MM          READ_DATA
                        

029e d000		;	      READ_DO           GD          /0000
02a0 9290		;	                        MM          READ_DATA
02a2 5010		;	                        -           ASCII_BR
02a4 12e6		;	                        JZ          READ_END
02a6 8290		;	                        LD          READ_DATA
02a8 a25a		;	                        SC          BYTIFY
02aa 8258		;	                        LD          BYTIFY_SECOND     
02ac 5012		;	                        -           ASCII_BELL
02ae 12b2		;	                        JZ          READ_FIRST
02b0 02c8		;	                        JP          READ_ALL

02b2 828c		;	      READ_FIRST        LD          READ_BUFFER_LIMIT
02b4 9242		;	                        MM          WRITE_BASE
02b6 8256		;	                        LD          BYTIFY_FIRST
02b8 9244		;	                        MM          WRITE_DATA
02ba 3002		;	                        LV          /2
02bc 628e		;	                        *           READ_COUNT
02be a246		;	                        SC          WRITE
02c0 3001		;	                        LV          /1
02c2 428e		;	                        +           READ_COUNT
02c4 928e		;	                        MM          READ_COUNT
02c6 02de		;	                        JP          READ_TEST_LIMIT

02c8 8292		;	      READ_ALL          LD          READ_BASE
02ca 9242		;	                        MM          WRITE_BASE
02cc 8290		;	                        LD          READ_DATA
02ce 9244		;	                        MM          WRITE_DATA
02d0 3002		;	                        LV          /2
02d2 628e		;	                        *           READ_COUNT
02d4 a246		;	                        SC          WRITE
02d6 3001		;	                        LV          /1
02d8 428e		;	                        +           READ_COUNT
02da 928e		;	                        MM          READ_COUNT
02dc 02de		;	                        JP          READ_TEST_LIMIT

02de 828e		;	      READ_TEST_LIMIT   LD          READ_COUNT
02e0 528c		;	                        -           READ_BUFFER_LIMIT
02e2 12e6		;	                        JZ          READ_END
02e4 029e		;	                        JP          READ_DO

02e6 b294		;	      READ_END          RS          READ
;}
      

02e8 0001		;	SOME.yay  k /1
02ea 0002		;	k /2
02ec 0003		;	k /3
02ee 0004		;	k /4
02f0 0005		;	k /5
02f2 0006		;	k /6
02f4 0007		;	k /7
02f6 0008		;	k /8
02f8 0009		;	k /9
02fa 000a		;	k /a
02fc 000b		;	k /b
02fe 000c		;	k /c
0300 000d		;	k /d
0302 000e		;	k /e
0304 000f		;	k /f
0306 0010		;	k /10
0308 0011		;	k /11
030a 0012		;	k /12
030c 0013		;	k /13
030e 0014		;	k /14
0310 0015		;	k /15
0312 0016		;	k /16
0314 0017		;	k /17
0316 0018		;	k /18
0318 0019		;	k /19
031a 001a		;	k /1a
031c 001b		;	k /1b
031e 001c		;	k /1c
0320 001d		;	k /1d
0322 001e		;	k /1e
0324 001f		;	k /1f
0326 0020		;	k /20
0328 0021		;	k /21
032a 0022		;	k /22
032c 0023		;	k /23
032e 0024		;	k /24
0330 0025		;	k /25
0332 0026		;	k /26
0334 0027		;	k /27
0336 0028		;	k /28
0338 0029		;	k /29
033a 002a		;	k /2a
033c 002b		;	k /2b
033e 002c		;	k /2c
0340 002d		;	k /2d
0342 002e		;	k /2e
0344 002f		;	k /2f
0346 0030		;	k /30
0348 0031		;	k /31
034a 0032		;	k /32
034c 0033		;	k /33
034e 0034		;	k /34
0350 0035		;	k /35
0352 0036		;	k /36
0354 0037		;	k /37
0356 0038		;	k /38
0358 0039		;	k /39
035a 003a		;	k /3a
035c 003b		;	k /3b
035e 003c		;	k /3c
0360 003d		;	k /3d
0362 003e		;	k /3e
0364 003f		;	k /3f
0366 0040		;	k /40
0368 0041		;	k /41
036a 0042		;	k /42
036c 0043		;	k /43
036e 0044		;	k /44
0370 0045		;	k /45
0372 0046		;	k /46
0374 0047		;	k /47
0376 0048		;	k /48
0378 0049		;	k /49
037a 004a		;	k /4a
037c 004b		;	k /4b
037e 004c		;	k /4c
0380 004d		;	k /4d
0382 004e		;	k /4e
0384 004f		;	k /4f
0386 0050		;	k /50
0388 0051		;	k /51
038a 0052		;	k /52
038c 0053		;	k /53
038e 0054		;	k /54
0390 0055		;	k /55
0392 0056		;	k /56
0394 0057		;	k /57
0396 0058		;	k /58
0398 0059		;	k /59
039a 005a		;	k /5a
039c 005b		;	k /5b
039e 005c		;	k /5c
03a0 005d		;	k /5d
03a2 005e		;	k /5e
03a4 005f		;	k /5f
03a6 0060		;	k /60
03a8 0061		;	k /61
03aa 0062		;	k /62
03ac 0063		;	k /63
03ae 0064		;	k /64
03b0 0065		;	k /65
03b2 0066		;	k /66
03b4 0067		;	k /67
03b6 0068		;	k /68
03b8 0069		;	k /69
03ba 006a		;	k /6a
03bc 006b		;	k /6b
03be 006c		;	k /6c
03c0 006d		;	k /6d
03c2 006e		;	k /6e
03c4 006f		;	k /6f
03c6 0070		;	k /70
03c8 0071		;	k /71
03ca 0072		;	k /72
03cc 0073		;	k /73
03ce 0074		;	k /74
03d0 0075		;	k /75
03d2 0076		;	k /76
03d4 0077		;	k /77
03d6 0078		;	k /78
03d8 0079		;	k /79
03da 007a		;	k /7a
03dc 007b		;	k /7b
03de 007c		;	k /7c
03e0 007d		;	k /7d
03e2 007e		;	k /7e

03e4 0000		;	buffer      $           =10   0
03e6 0000		;	buffer      $           =10   2
03e8 0000		;	buffer      $           =10   4
03ea 0000		;	buffer      $           =10   6
03ec 0000		;	buffer      $           =10   8
03ee 0000		;	buffer      $           =10   a
03f0 0000		;	buffer      $           =10   c
03f2 0000		;	buffer      $           =10   e
03f4 0000		;	buffer      $           =10   10
03f6 0000		;	buffer      $           =10   12
				;	buffer      $           =10

03f8 8020		;	yaya  K     /8020
03fa ff00		;	FF00  K     /FF00      
03fc 8022		;	MAIN  LD    TRTR
      ;LD  CTE
      ;MM  _TEMP_1
      ;LD  IN
      ;SC  OR
      ;JP    LOL
      ;GD     /0000
      
      ;GD    /0000

03fe 33e4		;	      LV    buffer
0400 9292		;	      MM    READ_BASE
0402 3004		;	      LV    =4
0404 a294		;	      SC    READ

0406 33e4		;	      LV    buffer
0408 9028		;	      MM    _TEMP_1
040a 3000		;	      LV    /0
040c 9034		;	      MM    _TEMP_7
040e 30fc		;	      LV    =252
0410 a12c		;	      SC    PRINT

0412 c000		;	      HM    /0000 ; Término de programa
